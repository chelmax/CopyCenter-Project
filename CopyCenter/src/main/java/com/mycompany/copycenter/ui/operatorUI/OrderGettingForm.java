/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.copycenter.ui.operatorUI;

import com.mycompany.copycenter.entity.Orders;
import com.mycompany.copycenter.tools.OrdersTableModel;
import com.mycompany.copycenter.tools.QueryExecuter;
import com.mycompany.copycenter.ui.managerUI.PaymentDialog;
import java.awt.Dialog;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/**
 *
 * @author max19
 */
public class OrderGettingForm extends javax.swing.JFrame {
    
    private List<Orders> wfProcessingOrdersList = new ArrayList();
    private Vector<Object> wfProcessingOrders = new Vector<>();
    private Vector<String> columnNames = new Vector<>();
    
    /**
     * Creates new form OrderGettingForm
     */
    public OrderGettingForm() {
        this.createTableModelData();
        initComponents();  
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        takeOneButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(747, 330));

        orderTable.setModel(new OrdersTableModel(wfProcessingOrders, columnNames));
        jScrollPane1.setViewportView(orderTable);

        takeOneButton.setText("Take one");
        takeOneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeOneButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(takeOneButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(takeOneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void takeOneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeOneButtonActionPerformed
        List<String> ordersID = new ArrayList<>();
        for(Orders order : wfProcessingOrdersList)
            ordersID.add(String.valueOf(order.getIdOrder()));
        new GettingDialog(this, true, ordersID.toArray(new String[ordersID.size()]))
            .setVisible(true);
    }//GEN-LAST:event_takeOneButtonActionPerformed

     private void createTableModelData(){
        wfProcessingOrdersList = QueryExecuter.executeGetterHQLQuery(
                "from Orders o where o.orderStatus = 'Waiting for processing'"
        ); 
        for(Orders o : wfProcessingOrdersList){
            Vector<Object> oneRow = new Vector<>();
            oneRow.add(o.getIdOrder());
            oneRow.add(o.getClientName());
            oneRow.add(o.getClientPhone());
            oneRow.add(o.getTypes().getName());
            oneRow.add(o.getSize());
            oneRow.add(o.getPrice());
            oneRow.add(o.getOrderStatus());
            wfProcessingOrders.add(oneRow);
        }
        columnNames.add("â„–");
        columnNames.add("Client Name");
        columnNames.add("Client Phone");
        columnNames.add("Type");
        columnNames.add("Size");
        columnNames.add("Price");
        columnNames.add("Status");
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton takeOneButton;
    // End of variables declaration//GEN-END:variables
}
